[versioneer]
VCS = git
style = pep440
versionfile_source = autodh/_version.py
versionfile_build = autodh/_version.py
tag_prefix = v
parentdir_prefix = osaro-


# TODO: Please work to enable all checks
[isort]
line_length=120
skip=venv,.venv
;known_standard_library=std,std2
;known_third_party=pytest,tensorflow,sklearn,matplotlib
;known_first_party=bifrost,geri,odin,mimir,tyr
known_first_party=odin
multi_line_output=3
default_section=THIRDPARTY


#TODO: Enable max-line-length check
[flake8]
; select = E,W,F,I
;max_line_length = 99
ignore = E501,E722,W503,W504,F841,E226
exclude =
    .git,
    __pycache__,
    .pytest_cache,
    venv
    .venv


# TODO: Remove all the skipped checks (unless needed)
# Bandit - is a tool for finding common security issues in Python code.
# List of Issues in odin_baseline: B101,B103,B104,B105,B106,B107,B108,B301,B307,B311,B312,B314,B318,B322,B401,B403,B404,B405,B408,B506,B603,B605,B607,B701
#
# Skipped, but for good reason:
# B403, B301: Allows us to import and use pickle. Used for ipc e.g. in sharedmemory.py
# B108: Allows us to use /tmp for unit tests e.g in test_sharedmemory.py
# B101: Allows use of random module.
# B104: Bind all is needed right now, especially since we plan to work from within a docker container
[bandit]
targets: odin
skips: B101,B311,B403,B301,B108,B104
try_except_continue:
    check_typed_exception: True
try_except_pass:
    check_typed_exception: True
exclude_dirs:tests


# Coverage.py - is a tool for measuring code coverage of Python programs.
[coverage:run]
branch = True
omit =
    */__main__.py
    */venv/*
    */.venv/*
    versioneer.py
    # odin/_version.py is omitted because this file is automatically generated by versioneer
    odin/_version.py
    # omit test files from coverage
    */test_*.py
    conftest.py
    */*_test.py


[coverage:report]
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:
ignore_errors = True


[mypy]
files = odin
check_untyped_defs = True
strict_equality = True
warn_unreachable = True
disallow_untyped_defs = True
warn_unused_configs = True
exclude = tests